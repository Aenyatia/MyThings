@using System.ComponentModel
@using ToDoList.Models
@model TasksViewModel

@{
	ViewData["Title"] = "Index";
}

<div class="row">
	<!-- Tasks and categories -->
	<div class="col-lg-2 p-lg-3">
		<h2>Tasks</h2>
		<div>
			<a href="#" class="btn btn-secondary btn-block">
				Today
				<span class="badge badge-light badge-pill float-right">@Model.TodayTasks.Count()</span>
			</a>
			<a href="#" class="btn btn-secondary btn-block">
				Tomorrow
				<span class="badge badge-light badge-pill float-right">@Model.TomorrowTasks.Count()</span>
			</a>
			<a href="#" class="btn btn-secondary btn-block">
				Later
				<span class="badge badge-light badge-pill float-right">@Model.LaterTasksCount</span>
			</a>
			<a href="#" class="btn btn-secondary btn-block">
				Not done
				<span class="badge badge-light badge-pill float-right">@Model.NotDoneTasks.Count()</span>
			</a>
			<a href="#" class="btn btn-secondary btn-block">
				History
				<span class="badge badge-light badge-pill float-right">@Model.HistoryTasksCount</span>
			</a>
		</div>

		<hr />

		<h3>Categories</h3>
		<form class="input-group mb-2" id="categoryForm">
			<input class="form-control" type="text" id="categoryName" placeholder="Add category">
			<div class="input-group-append">
				<button class="btn btn-outline-secondary js-add-category" type="submit">Add</button>
			</div>
		</form>

		<div id="categoriesList">
			@foreach (var category in Model.Categories)
			{
				<a href="#" class="btn btn-outline-secondary btn-block">@category</a>
			}
		</div>
	</div>

	<!-- Active and completed items -->
	<div class="col-lg-8 p-lg-3">
		<h2>Active Items</h2>
		<form class="input-group mb-2" id="taskForm">
			<input class="form-control" type="text" id="taskName" placeholder="Enter a new task to do...">
			<div class="input-group-append">
				<button class="btn btn-outline-secondary">Create task</button>
			</div>
		</form>

		<h3>today</h3>
		<ul class="list-group">
			@if (Model.TodayTasks.Any())
			{
				foreach (var task in Model.TodayTasks)
				{
					<li class="list-group-item list-group-item-action @task.PriorityClass()" data-task-id="@task.Id">
						@task.Name
						<div class="float-right actions">
							<a asp-controller="Tasks" asp-action="Complete">Complete</a>
							<a asp-controller="Tasks" asp-action="Edit" asp-route-taskId="@task.Id">Edit</a>
							<a asp-controller="Tasks" asp-action="Delete">Delete</a>
						</div>
					</li>
				}
			}
			else
			{
				<li class="list-group-item disabled">No tasks.</li>
			}
		</ul>

		<br />

		<h3>tomorrow</h3>
		<ul class="list-group">
			@if (Model.TomorrowTasks.Any())
			{
				foreach (var task in Model.TomorrowTasks)
				{
					<li class="list-group-item list-group-item-action @task.PriorityClass()" data-task-id="@task.Id">
						@task.Name
						<div class="float-right actions">
							<a asp-controller="Tasks" asp-action="Complete">Complete</a>
							<a asp-controller="Tasks" asp-action="Edit" asp-route-taskId="@task.Id">Edit</a>
							<a asp-controller="Tasks" asp-action="Delete">Delete</a>
						</div>
					</li>
				}
			}
			else
			{
				<li class="list-group-item disabled">No tasks.</li>
			}
		</ul>

		<br />

		<h3>later</h3>
		<ul class="list-group">
			@if (Model.LaterTasks.Any())
			{
				foreach (var task in Model.LaterTasks)
				{
					<li class="list-group-item list-group-item-action @task.PriorityClass()" data-task-id="@task.Id">
						@task.Name
						<div class="float-right actions">
							<a asp-controller="Tasks" asp-action="Complete">Complete</a>
							<a asp-controller="Tasks" asp-action="Edit" asp-route-taskId="@task.Id">Edit</a>
							<a asp-controller="Tasks" asp-action="Delete">Delete</a>
						</div>
					</li>
				}
			}
			else
			{
				<li class="list-group-item disabled">No tasks.</li>
			}
		</ul>

		<br />
		
		<h3>recently completed</h3>
		<ul class="list-group">
			@if (Model.RecentlyCompletedTasks.Any())
			{
				foreach (var task in Model.RecentlyCompletedTasks)
				{
					<li class="list-group-item list-group-item-action @task.PriorityClass()" data-task-id="@task.Id">
						@task.Name
						<div class="float-right actions">
							<a asp-controller="Tasks" asp-action="Complete">Complete</a>
							<a asp-controller="Tasks" asp-action="Edit" asp-route-taskId="@task.Id">Edit</a>
							<a asp-controller="Tasks" asp-action="Delete">Delete</a>
						</div>
					</li>
				}
			}
			else
			{
				<li class="list-group-item disabled">No tasks.</li>
			}
		</ul>
	</div>

	<!-- Details -->
	<div class="col-lg-2 p-lg-3">
		<div id="detailsTab">

		</div>
	</div>
</div>

@section scripts{
	<script>
		$(document).ready(function () {

			// display details
			$("#activeItems li").on("click",
				function (e) {
					e.preventDefault();

					const detailsTab = $("#detailsTab");
					const itemId = $(e.target).data("task-id");

					detailsTab.children().remove();

					$.ajax({
						url: `api/tasks/${itemId}`,
						method: "GET",
					}).done(function (data) {
						const header = $("<h3></h3>").append("Details");
						const itemInfo = $("<ul></ul>", { class: "list-group" });

						itemInfo.append($("<li></li>", { class: "list-group-item" })
							.append(`Due data: ${data.dueDate || "-"}`));
						itemInfo.append($("<li></li>", { class: "list-group-item" })
							.append(`Priority: ${data.priority || "-"}`));
						itemInfo.append($("<li></li>", { class: "list-group-item" })
							.append(`Category: ${data.category || "-"}`));

						detailsTab.append(header).append(itemInfo);
					}).fail(function () {
						alert("Something failed.");
					});
				});

			// add category
			$("#categoryForm").on("submit",
				function (e) {
					e.preventDefault();

					const categoryName = $("#categoryName").val();

					$.ajax({
						url: "/api/categories",
						method: "POST",
						contentType: "application/json",
						data: JSON.stringify({
							"name": categoryName
						})
					}).done(function () {
						const link = $("<a></a>", { href: "#", class: "btn btn-outline-secondary btn-block" });

						link.append(categoryName);

						$("#categoriesList").append(link);
					}).fail(function () {
						alert("Something failed.");
					});
				});

			// add task
			$("#taskForm").on("submit",
				function () {
					const taskName = $("#taskName").val();

					$.ajax({
						url: "/api/tasks",
						method: "POST",
						contentType: "application/json",
						data: JSON.stringify({
							"name": taskName
						})
					}).done(function () {
						refresh();
					}).fail(function () {
						alert("Something failed.");
					});
				});

			const setNumberOfItems = function () {
				$.ajax({
					url: "api/tasks",
					method: "GET"
				}).done(function (data) {
					$("#today-items-cout").text(data.todayTasks);
					$("#tomorrow-items-count").text(data.tomorrowTasks);
					$("#later-items-count").text(data.laterTasks);
					$("#not-done-items-count").text(data.notDoneTasks);
					$("#history-items-count").text(data.historyTasks);
				}).fail(function () {
					alert("Something failed.");
				});
			};

			setNumberOfItems();
		});
	</script>
}
